; Check if a variable is in a list
(= (is-var-in-list $var $list) (if (== $list ()) False (let $head (car-atom $list) (if (== $var $head) True (is-var-in-list $var (cdr-atom $list))))))


; Check if variables from one list exist in another list
(= (vars-exist $list1 $list2) (if (== $list1 ()) False (let $head (car-atom $list1) (if (is-var-in-list $head $list2) True (vars-exist (cdr-atom $list1) $list2)))))

(= (combiner-pat1-pat2 $vars () $accum)
   $accum
)
(= (combiner-pat1-pat2 $vars $pat2 $accum)
  (superpose (
    ;; Option 1: keep the slot
    (combiner-pat1-pat2 $vars (cdr-atom $pat2) (union-atom $accum ((car-atom $pat2))))
    ;; Option 2: replace with each var
    (combiner-pat1-pat2 $vars (cdr-atom $pat2) (union-atom $accum ((superpose $vars))))

  ))
)

; Get filtered combinations of variables
(= (combine_lists $vars1 $vars2) 
    (let* (
        ($combinations (combiner-pat1-pat2 $vars1 $vars2 ()))
        ; (() (println!( "Combinations: " $combinations)))
        ($vars1-check (if (vars-exist $combinations $vars1) $combinations Empty))
        ; (() (println! ("Vars1 check: " $vars1-check)))
        ; ($vars2-check (if (vars-exist $combinations $vars2) $combinations Empty))
        ; (() (println! ("Vars2 check: " $vars2-check)))
    ) $combinations
    )
)


; ; !(experimenting with the second pattern that has 1 variable)
; !(combine_lists ($B) ($C))
; !(combine_lists ($A $B) ($C))

; ; !(experimenting with the second pattern that has 2 variables)
; !(combine_lists ($A $B) ($B $A))

; ; !(experimenting with the second pattern that has 3 variables)
; !(combine_lists ($A $B) ($A $C $D))